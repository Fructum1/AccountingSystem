// <auto-generated />
using System;
using AccountingSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountingSystem.Migrations
{
    [DbContext(typeof(DmdCoursDBContext))]
    partial class DmdCoursDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccountingSystem.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<bool>("PortabilityDate")
                        .HasColumnType("bit")
                        .HasColumnName("portability_date");

                    b.Property<int>("RequestType")
                        .HasColumnType("int")
                        .HasColumnName("request_type");

                    b.Property<int>("Sender")
                        .HasColumnType("int")
                        .HasColumnName("sender");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("date")
                        .HasColumnName("sending_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("SubstituteEmployee")
                        .HasColumnType("int")
                        .HasColumnName("substitute_employee");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.HasKey("Id");

                    b.HasIndex("RequestType");

                    b.HasIndex("Sender");

                    b.HasIndex("Status");

                    b.ToTable("request", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("request_status", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit")
                        .HasColumnName("paid");

                    b.HasKey("Id");

                    b.ToTable("request_type", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("UnusedVacationDays")
                        .HasColumnType("int")
                        .HasColumnName("unused_vacation_days");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("surname");

                    b.Property<int>("Unit")
                        .HasColumnType("int")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("Position");

                    b.HasIndex("Unit");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("RequestApprover", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.HasKey("UserId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("request_approver", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Request", b =>
                {
                    b.HasOne("AccountingSystem.Models.RequestType", "RequestTypeNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("RequestType")
                        .IsRequired()
                        .HasConstraintName("FK_request_request_type");

                    b.HasOne("AccountingSystem.Models.User", "SenderNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("Sender")
                        .IsRequired()
                        .HasConstraintName("FK_request_user");

                    b.HasOne("AccountingSystem.Models.RequestStatus", "StatusNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("Status")
                        .IsRequired()
                        .HasConstraintName("FK_request_request_status");

                    b.Navigation("RequestTypeNavigation");

                    b.Navigation("SenderNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.HasOne("AccountingSystem.Models.Position", "PositionNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Position")
                        .IsRequired()
                        .HasConstraintName("FK_user_position");

                    b.HasOne("AccountingSystem.Models.Unit", "UnitNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Unit")
                        .IsRequired()
                        .HasConstraintName("FK_user_unit");

                    b.Navigation("PositionNavigation");

                    b.Navigation("UnitNavigation");
                });

            modelBuilder.Entity("RequestApprover", b =>
                {
                    b.HasOne("AccountingSystem.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_request_approver_request");

                    b.HasOne("AccountingSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_request_approver_user");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("AccountingSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_user_role_role");

                    b.HasOne("AccountingSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_role_user");
                });

            modelBuilder.Entity("AccountingSystem.Models.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AccountingSystem.Models.RequestStatus", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("AccountingSystem.Models.RequestType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("AccountingSystem.Models.Unit", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
